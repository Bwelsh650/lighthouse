(function wrapInNativePromise() {
        const __nativePromise = window.__nativePromise || Promise;
        const URL = window.__nativeURL || window.URL;
        return new __nativePromise(function (resolve) {
          return __nativePromise.resolve()
            .then(_ => (() => {
      
      function main(value) {
      return value;
    }
      return main(1);
    })())
            .catch(function wrapRuntimeEvalErrorInBrowser(err) {
  err = err || new Error();
  const fallbackMessage = typeof err === 'string' ? err : 'unknown error';
  return {
    __failedInBrowser: true,
    name: err.name || 'Error',
    message: err.message || fallbackMessage,
    stack: err.stack || new Error().stack
  };
})
            .then(resolve);
        });
      }())